<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="rss.css" ?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">

    <channel>
        <title>Oliver Brotchie's Blog</title>
        <description>A developer who loves minimalist programming and Rust. ðŸ¦€</description>
        <language>en-us</language>
        <link>https://oliverbrotchie.github.io/rss.xml</link>
        <atom:link href="https://oliverbrotchie.github.io/rss.xml" rel="self" type="application/rss+xml" />

        <!-- OB -->
        <item id='63649212340911'>
            <title>Blog Update</title>
            <guid>https://oliverbrotchie.github.io/blog/63649212340911</guid>
            <pubDate>Mon, 06 Dec 2021 00:11:09 +0000</pubDate>
            <description><![CDATA[<h1>Blog Update</h1><span>by Oliver Brotchie </span><time datetime='Mon, 06 Dec 2021 00:11:09 +0000'>Mon, 06 Dec 2021</time><p>I just finished updating the UI of this blog to a more modern design.</p><p>Please let me know if there are any issues with it!</p>]]></description>
        </item>
        <item id='71644708747299'>
            <title>CSS Fingerprinting</title>
            <guid>https://oliverbrotchie.github.io/blog/71644708747299</guid>
            <pubDate>Sun, 05 Dec 2021 18:50:15 +0000</pubDate>
            <description><![CDATA[<h1>CSS Fingerprinting</h1><span>by Oliver Brotchie </span><time datetime='Sun, 05 Dec 2021 18:50:15 +0000'>Sun, 05 Dec 2021</time><h1 id='css_fingerpriting'>CSS Fingerpriting</h1><p><strong>An experimental method for CSS based fingerprinting and a pure CSS &#8217;supercookie&#8217;.</strong></p><h2 id='what_is_it?'>What is it?</h2><p>CSS Fingerprinting is a technique of tracking and gathering information on site visitors. This method exploits the nature of CSS to collect various characteristics about the visitor&#8217;s browser and device, which can later be used to either identify or track said visitor.</p><h2 id='how_does_it_work?'>How does it work?</h2><p>By sending a variety of media queries that apply to specific browser characteristics, the browser will select a set of styles that apply to itself. We then trick the browser into sending this information back to the server by setting the background-image of these styles to a specific URL. The server will then respond with HTTP Status 410 (Gone) to avoid any requests of these characteristics on subsequent reloads.</p><p>Font detection works a little differently; every font not installed on device will send a request. By comparing the differences between the requests and the full list of fonts, we can conclude what fonts are installed.</p><h2 id='css_cookie'>CSS Cookie</h2><p>We can also track visitors cross-origin by requesting an endpoint on the server that will return a permanent redirect (HTTP status 308) to a unique address. The browser will then permanently make requests to the previously generated unique address whenever the endpoint is requested. This creates a pure CSS cookie that is reminisent of the &#8217;<a href='https://supercookie.me/'>supercookie</a>&#8217; exploit. This cookie is stored for an unlimited amount of time; the only way to remove it is to fully clear the browser&#8217;s cache.</p><h2 id='why_is_this_important?'>Why is this important?</h2><p>This technique avoids anti-tracking methods such as NoScript, VPNs or browser extensions, as it requires no Javascript or Cookies to function.</p><p>Currently, this method is not scalable as it requires over 1MB of CSS downloads and hundreds of requests per user. However, with the next upcoming draft of the CSS specification, <a href='https://www.w3.org/TR/css-values-4/'>CSS Values 4</a>, it may dramatically shrink the number of requests per user by allowing the use of custom variables in URLs.</p><p>Not only will the upcoming draft make this method scalable, but it will also increase its precision. Currently, without alternative means, it is hard to conclusively link every request to a specific visitor as the only feasible way to determine their origin is to group the requests by the IP address of the connection. However, with the new draft, by generating a randomized string and interpolating it into the URL tag for every visitor, we can accurately identify all requests from said visitor.</p><h2 id='why_this_method_beats_all_current_anti-fingerprinting_methods'>Why this method beats all current anti-fingerprinting methods</h2><p>Anti-fingerprinting mostly focuses on blocking/spoofing JavaScript APIs as it is far more capable. If JavaScript is blocked (already a high entropy datapoint) there are ways to detect it in CSS or with headers, at which point you would use server-side code to inject the CSS and fingerprint the other characteristics of the browser.</p><p>The other problem is how most major browser currently treat permanent redirects in CSS files. CSS permenant redirects will always uniquely identify a user on a single origin without the need for client side code, however, currently most browsers cache permenant redirects in relation to the CSS document not the page origin - allowing for cross-origin tracking.</p><h3 id='read_more_and_see_some_examples_over_at_oliverbrotchie/css-fingerprint_.'>Read more and see some examples over at <a href='https://github.com/OliverBrotchie/CSS-Fingerprint'>OliverBrotchie/CSS-Fingerprint</a>.</h3>]]>
            </description>
        </item>







    </channel>
</rss>